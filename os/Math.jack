// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int n;
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
      var int i;
      let n = 16;
      let twoToThe = Array.new(n);
      let twoToThe[0] = 1;
      let i = 1;
      while (i < n) {
        let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
        let i = i + 1;
      }
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, j;
      let sum = 0;
      let shiftedX = x;
      let j = 0;
      while (j < n) {
        if (Math.bit(y,j)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the division operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int ax, ay, q, sign;
      let sign = 1;
      if (x < 0) {
        let sign = -sign;
      }
      if (y < 0) {
        let sign = -sign;
      }
      let ax = Math.abs(x);
      let ay = Math.abs(y);
      if (ay > ax) {
        return 0;
      }
      let q = Math.divide(ax, 2 * ay);
      if ((ax - (2 * q * ay)) < ay) {
        return 2 * q * sign;
      } else {
        return 2 * q + 1 * sign;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, foo;
      let y = 0;
      let j = (n / 2) - 1;
      while (j > -1) {
        let foo = (y + twoToThe[j]) * (y + twoToThe[j]);
        if (~(foo > x) & (foo > 0)) {
          let y = y + twoToThe[j];
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }

    /** Returns true if the j-th bit of the integer x is 1 and false otherwise. */
    function boolean bit(int x, int j) {
      return ~((x & twoToThe[j]) = 0);
    }
}
